# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, zilliz
# This file is distributed under the same license as the Arctern package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arctern \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-05 14:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:1
msgid "文件读写"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:3
msgid "Arctern 继承 pandas 的文件读写接口，支持读写数据类型为 WKT、WKB 以及 GeoJson 的文件。关于通过 pandas 读写文件的具体方法可参考 pandas 官方文档。"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:5
msgid "导入文件"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:7
msgid "WKT 和 WKB 格式"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:9
msgid "本例使用 wkt_geos.csv 文件演示如何从文件读取 WKT 和 WKB 数据。此文件主要定义了四个 WKT 格式的几何体对象，包括一个点（POINT）和三个多边形（POLYGON）。wkt_geos.csv 文件内容如下："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:19
msgid "首先，使用 pandas 的 read_csv 方法导入文件并构造 pandas.Series 对象 data_wkt："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:35
msgid "基于由 WKT 数据组成的 pandas.Series 对象 data_wkt 构造 arctern.GeoSeries 对象 geo_wkt："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:41
msgid "为了演示如何读取 WKB 格式的数据并创建 GeoSeries 对象，我们将之前从  wkt_geos.csv 文件中读取并创建的 pandas.Series 对象从 WKT 格式转换为 WKB 格式。具体方法是使用 to_wkb 方法从 GeoSeries 对象 geo_wkt 得到  WKB 格式的 pandas.Series 对象 data_wkb。"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:43
msgid "然后，基于 WKB 格式的 pandas.Series 对象 data_wkb 构造 arctern.GeoSeries 对象 geo_wkb："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:52
msgid "使用 GeoSeries 的 geom_equals 方法比较 geo_wkt 和 geo_wkb 两个 GeoSeries 对象，发现它们是相同的。这是因为   geo_wkt 和 geo_wkb 本质上都是由同一数据构造的 GeoSeries 对象。"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:63
#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:125
msgid "GeoJson 格式"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:65
msgid "本例使用 geos.json 文件演示如何从文件读取 GeoJson 数据。此文件主要定义了四个 WKT 格式的几何体对象，包括一个点（POINT）和三个多边形（POLYGON）。geos.json 文件内容如下："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:76
msgid "首先，使用 pandas 的 read_json 方法导入文件并构造 pandas.Series 对象 data_json："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:89
msgid "基于由 GeoJson 数据组成的 pandas.Series 对象 data_json 构造 arctern.GeoSeries 对象 geo_json："
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:95
msgid "使用 GeoSeries 的 geom_equals 方法比较 geo_wkb 和 geo_json 两个 GeoSeries 对象，发现它们是相同的。这是因为   geo_wkb 和 geo_json 的源文件（wkt_geos.csv 和 geos.json）中定义的是相同的几何体。"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:106
msgid "文件导出"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:108
msgid "WKT 格式"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:110
msgid "首先，调用 GeoSeries 的 to_wkt 方法从 GeoSeries 对象得到一个 pandas.Series 对象。然后，调用 pandas.Series 的 to_csv 方法将数据保存为 CSV 文件。"
msgstr ""

#: ../../source/feature_description/spatiotemporal_analysis/read_and_write_file.md:127
msgid "首先，调用 GeoSeries 的 as_geojson 方法从 GeoSeries 对象得到一个 pandas.Series 对象。然后，调用 pandas.Series 的 to_json 方法将数据保存为 JSON 文件。"
msgstr ""
